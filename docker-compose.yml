version: "3.9"

services:
  # ===========================
  # KeyDB (Redis-compatible)
  # ===========================
  aroha-keydb:
    image: eqalpha/keydb:latest
    container_name: aroha-keydb
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - keydb_data:/data
    command: keydb-server --appendonly yes --save "60 1"
    networks:
      - aroha-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================
  # Price Server (WS + REST API)
  # ===========================
  aroha-price-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aroha-price-server
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - PORT=4000
      - NODE_ENV=production
      - REDIS_URL=redis://aroha-keydb:6379
    depends_on:
      aroha-keydb:
        condition: service_healthy
    ports:
      - "4000:4000"
    command: ["pm2-runtime", "backend/price-server/index.js"]
    networks:
      - aroha-net

  # ===========================
  # Matching Engine
  # ===========================
  aroha-matching-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aroha-matching-engine
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://aroha-keydb:6379
    depends_on:
      aroha-price-server:
        condition: service_started
    command: ["pm2-runtime", "backend/matching-engine/matchingEngine.js"]
    networks:
      - aroha-net

  # ===========================
  # Risk Engine
  # ===========================
  aroha-risk-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aroha-risk-engine
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://aroha-keydb:6379
    depends_on:
      aroha-matching-engine:
        condition: service_started
    command: ["pm2-runtime", "backend/matching-engine/riskEngine.js"] # <-- confirm path
    networks:
      - aroha-net

  # ===========================
  # Candle Worker (OHLC)
  # ===========================
  aroha-candle-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aroha-candle-worker
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://aroha-keydb:6379
    depends_on:
      aroha-price-server:
        condition: service_started
    command: ["pm2-runtime", "backend/price-server/candleWorker.js"]
    networks:
      - aroha-net

  # ===========================
  # Redis Exporter (KeyDB Metrics)
  # ===========================
  aroha-redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: aroha-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://aroha-keydb:6379
    ports:
      - "9121:9121"
    networks:
      - aroha-net
    depends_on:
      - aroha-keydb

  # ===========================
  # Node Exporter (Host Metrics)
  # ===========================
  aroha-node-exporter:
    image: prom/node-exporter:latest
    container_name: aroha-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - aroha-net

  # ===========================
  # Prometheus (Metrics DB)
  # ===========================
  aroha-prometheus:
    image: prom/prometheus:latest
    container_name: aroha-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - aroha-net
    depends_on:
      - aroha-redis-exporter
      - aroha-node-exporter

  # ===========================
  # Alertmanager (Notifications)
  # ===========================
  aroha-alertmanager:
    image: prom/alertmanager:latest
    container_name: aroha-alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - aroha-net
    depends_on:
      - aroha-prometheus

  # ===========================
  # Grafana (Dashboard UI)
  # ===========================
  aroha-grafana:
    image: grafana/grafana:latest
    container_name: aroha-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - aroha-prometheus
      - aroha-alertmanager
    networks:
      - aroha-net

  # ===========================
  # Nginx Reverse Proxy (SSL + API Gateway)
  # ===========================
  aroha-nginx:
    image: nginx:latest
    container_name: aroha-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - aroha-price-server
      - aroha-grafana
      - aroha-prometheus
    networks:
      - aroha-net

volumes:
  keydb_data:
  prometheus_data:
  grafana_data:

networks:
  aroha-net:
    driver: bridge
